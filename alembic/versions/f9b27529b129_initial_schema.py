"""Initial schema

Revision ID: f9b27529b129
Revises:
Create Date: 2025-05-15 15:25:41.124871

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "f9b27529b129"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "day_slot",
        sa.Column("slot_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("slot_name", sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint("slot_id"),
    )
    op.create_table(
        "event",
        sa.Column("event_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("start_date", sa.DateTime(), nullable=False),
        sa.Column("end_date", sa.DateTime(), nullable=False),
        sa.Column("related_type", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("event_id"),
    )
    op.create_table(
        "monument",
        sa.Column("monument_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("latitude", sa.Float(), nullable=False),
        sa.Column("longitude", sa.Float(), nullable=False),
        sa.Column("popularity", sa.Float(), nullable=False),
        sa.Column("indoor", sa.Boolean(), nullable=True),
        sa.Column("location", sa.String(length=255), nullable=True),
        sa.Column("type", sa.String(length=255), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("image_url", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("monument_id"),
    )
    op.create_table(
        "tag",
        sa.Column("tag_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("tag_name", sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint("tag_id"),
        sa.UniqueConstraint("tag_name"),
    )
    op.create_table(
        "user",
        sa.Column("user_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("password", sa.String(length=255), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("location", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "bookmarks",
        sa.Column("bookmark_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("monument_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["monument_id"],
            ["monument.monument_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.user_id"],
        ),
        sa.PrimaryKeyConstraint("bookmark_id"),
    )
    op.create_table(
        "monument_event",
        sa.Column("monument_id", sa.Integer(), nullable=False),
        sa.Column("event_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.ForeignKeyConstraint(
            ["event_id"],
            ["event.event_id"],
        ),
        sa.ForeignKeyConstraint(
            ["monument_id"],
            ["monument.monument_id"],
        ),
        sa.PrimaryKeyConstraint("monument_id", "event_id"),
    )
    op.create_table(
        "monument_slot",
        sa.Column("monument_id", sa.Integer(), nullable=False),
        sa.Column("slot_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["monument_id"],
            ["monument.monument_id"],
        ),
        sa.ForeignKeyConstraint(
            ["slot_id"],
            ["day_slot.slot_id"],
        ),
        sa.PrimaryKeyConstraint("monument_id", "slot_id"),
    )
    op.create_table(
        "monument_tag",
        sa.Column("tag_id", sa.Integer(), nullable=False),
        sa.Column("monument_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["monument_id"],
            ["monument.monument_id"],
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["tag.tag_id"],
        ),
        sa.PrimaryKeyConstraint("tag_id", "monument_id"),
    )
    op.create_table(
        "user_preference",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("tag_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["tag.tag_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.user_id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "tag_id"),
    )
    op.create_table(
        "user_visited_monument",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("monument_id", sa.Integer(), nullable=False),
        sa.Column("visited_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["monument_id"],
            ["monument.monument_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.user_id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "monument_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_visited_monument")
    op.drop_table("user_preference")
    op.drop_table("monument_tag")
    op.drop_table("monument_slot")
    op.drop_table("monument_event")
    op.drop_table("bookmarks")
    op.drop_table("user")
    op.drop_table("tag")
    op.drop_table("monument")
    op.drop_table("event")
    op.drop_table("day_slot")
    # ### end Alembic commands ###
